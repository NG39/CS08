# import * from './generated/prisma.graphql'

type Query {
	userPosts(userID: ID!): [Post!]!
	checkPermission: String
  gradeFromCourseID(id: ID!): [StudentCourseGrade!]!
  getGradeByID(id: ID!): StudentCourseGrade!
  getOverallGrade(year: Int!, id: ID!, level: Level!): OverallGrade!
  getCourses(searchString: String): [Course!]!
  getCourseRuns(searchString: String): [CourseRun!]!
  getStudents(searchString: String): [Student!]
  getDegrees(searchString: String): [Degree!]!
  getUsers: [User!]!
  getcourseDegreeWeight(where: CourseDegreeWeightWhereUniqueInput!): CourseDegreeWeight
  getcourseDegreeWeights(where: MyCourseDegreeWeightWhereInput!): [CourseDegreeWeight]!
} 

type Mutation {
	createPost(text: String!, userID: ID!): Post
	signup(email: String!, password: String!, name: String!, role: Role!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  changeGradeWeight(grade: Float!, weight: Float!, id: ID!): StudentCourseGrade!
  deleteCourse(id: ID!): Course! 
  createCourseRun(data: CourseRunInput!): CourseRun!
  updateCourseRun(id: ID!, data: CourseRunInput!): CourseRun!
  deleteCourseRun(id: ID!, courseid:ID!): CourseRun
  deleteUser(id: ID!): User!
  updateUserRole(id: ID!, role: Role!): User!
  createDegree(data: DegreeCreateInput!): Degree!
  updateDegree(id: ID!, data: DegreeUpdateInput!): Degree!
  deleteDegree(id: ID!): Degree
  createStudent(data: studentInput!): Student!
  createStudentByUpload(data: studentInput!): Student!
  updateStudent(id: ID!, data: studentInput!): Student!
  deleteStudent(id: ID!): Student!
  createStudentGrade(data: StudentCourseGradeInput!) : StudentCourseGrade!
  updateStudentGrade(id: ID!, data: StudentCourseGradeInput!) : StudentCourseGrade!
  deleteStudentGrade(id: ID!) : StudentCourseGrade!
  createOverallGrade(data: OverallGradeInput!) : OverallGrade!
  updateOverallGrade(id: ID!, data: OverallGradeInput!) : OverallGrade!
  deleteOverallGrade(id: ID!) : OverallGrade!
  createCourseDegreeWeight(data: MyCourseDegreeWeightInput!): CourseDegreeWeight!
  deleteCourseDegreeWeight(id: ID!): CourseDegreeWeight
	updateCourseDegreeWeight(data: MyCourseDegreeWeightInput!, where: CourseDegreeWeightWhereUniqueInput!): CourseDegreeWeight
}

type Course {
  id: ID!
  level: Level
  courseID: String!
  name: String
  info: String
}

type CourseRun {
  id: ID!
  course: Course!
  year: Int!
}

input CourseRunInput {
  id: ID
  level: Level
  courseID: String!
  name: String
  info: String
  year: Int!
}

type Degree {
  id: ID!
  degreeCode: String!
  name: String!
  info: String!
  courses: [Course!]
  courseDegreeWeights: [CourseDegreeWeight!]
}

type Student {
  id: ID!
  firstname: String!
  surname: String!
  guid: String!
  degree: Degree!
  level: Level!  
  entryYear: Int!
  mygrades: [StudentCourseGrade!]
  myoverallgrades: [OverallGrade!]
}

input studentInput { 
  firstname: String!
  surname: String!
  guid: String!
  degree: ID!
  level: Level!
  entryYear: Int!
}

input updateCourseInput {
  level: Level
  year: Int
  courseID: String
  name: String
  info: String
  degrees: [ID!]
}

type AuthPayload {
  token: String
  user: User
}


type StudentCourseGrade {
  id: ID!
  course: Course!
  student: Student!
  weight: Float!
  grade: Float!
  date: Int!
  #updatedAt: DateTime!
  #createdAt: DateTime!
}

input StudentCourseGradeInput {
  student: ID!
  course: ID!
  weight: Float!
  grade: Float!
  date: Int!
}

type OverallGrade {
  id: ID!
  student: Student!
  year: Int!
  studentLevel: Level!
  grade: Float!
  #updatedAt: DateTime!
  #createdAt: DateTime!
}

input OverallGradeInput {
  student: ID!
  year: Int!
  studentLevel: Level!
  grade: Float!
}

input degreeInput {
  degreeCode: String!
  name: String!
  info: String!
}

type CourseDegreeWeight {
  id: ID!
  course: Course!
  degree: Degree!
  weight: Float!
}

input MyCourseDegreeWeightWhereInput {
  degree: ID!
}

input MyCourseDegreeWeightInput {
  course: ID!
  degree: ID!
  weight: Float!
}