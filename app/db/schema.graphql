# import * from './generated/prisma.graphql'

type Query {
	userPosts(userID: ID!): [Post!]!
	coursesFromYear(year: Int!): [Course!]!
	checkPermission: String
  gradeFromCourseID(id: ID!): [StudentCourseGrade!]!
  getGradeByID(id: ID!): StudentCourseGrade!
  getOverallGrade(year: Int!, id: ID!, level: Year!): OverallGrade!
  getCourses: [Course!]!
  getUsers: [User!]!
  getDegrees: [Degree!]!
  getWeight(degree: ID!, course: ID!): [CourseDegreeWeight!]!
  
  }

type Mutation {
	createPost(text: String!, userID: ID!): Post
	signup(email: String!, password: String!, name: String!, role: Role!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  changeGradeWeight(grade: Float!, weight: Float!, id: ID!): StudentCourseGrade!
  deleteUser(id: ID!): User!
  updateUserRole(id: ID!, role: Role!): User!
  checkStudentNames(guid: String!): Boolean!
  createStudent(firstname: String!, surname: String!, guid: String!, degree: ID!, year: Year!): Student!
  checkGrade(guid: String!, year: Int!, course: ID!): String!
  addGrade(studentlist: [StudentListInput!]!, course: ID!, year: Int!, weights: [DegreeCourseWeightInput!]!): AddGradeResult!

}

input StudentListInput {
  EMPLID: String
  Name: String
  Grade: String
}

type AddGradeResult {
  failed: [String]
}
input DegreeCourseWeightInput {
  degree: ID!
  weight: Float!
}


type AuthPayload {
  token: String
  user: User
}


type StudentCourseGrade {
  id: ID!
  course: Course!
  student: Student!
  weight: Float!
  grade: Float!
  createdAt: DateTime!
}

type OverallGrade {
  id: ID!
  student: Student!
  year: Int!
  studentLevel: Year!
  grade: Float!
}
type CourseDegreeWeight {
  id: ID!
  course: Course!
  degree: Degree!
  weight: Float!
}

